/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.cidenet.hulkstore.dao;

import com.cidenet.hulkstore.dto.*;
import com.cidenet.hulkstore.exceptions.*;

public interface UnityDao
{
	/** 
	 * Inserts a new row in the unity table.
	 */
	public UnityPk insert(Unity dto) throws UnityDaoException;

	/** 
	 * Updates a single row in the unity table.
	 */
	public void update(UnityPk pk, Unity dto) throws UnityDaoException;

	/** 
	 * Deletes a single row in the unity table.
	 */
	public void delete(UnityPk pk) throws UnityDaoException;

	/** 
	 * Returns the rows from the unity table that matches the specified primary-key value.
	 */
	public Unity findByPrimaryKey(UnityPk pk) throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the criteria 'unityId = :unityId'.
	 */
	public Unity findByPrimaryKey(int unityId) throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the criteria ''.
	 */
	public Unity[] findAll() throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the criteria 'unityId = :unityId'.
	 */
	public Unity[] findWhereUnityIdEquals(int unityId) throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the criteria 'unityDescription = :unityDescription'.
	 */
	public Unity[] findWhereUnityDescriptionEquals(String unityDescription) throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the criteria 'state = :state'.
	 */
	public Unity[] findWhereStateEquals(short state) throws UnityDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the unity table that match the specified arbitrary SQL statement
	 */
	public Unity[] findByDynamicSelect(String sql, Object[] sqlParams) throws UnityDaoException;

	/** 
	 * Returns all rows from the unity table that match the specified arbitrary SQL statement
	 */
	public Unity[] findByDynamicWhere(String sql, Object[] sqlParams) throws UnityDaoException;

}
